// <auto-generated />
using System;
using CodeAcademyFinal.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeAcademyFinal.Migrations
{
    [DbContext(typeof(RentEstateDb))]
    partial class RentEstateDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeAcademyFinal.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvertisementURL");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new { Id = 1, AdvertisementURL = "adv.jpg" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Area")
                        .IsRequired();

                    b.Property<decimal?>("AreaForView")
                        .IsRequired();

                    b.Property<int?>("CityId");

                    b.Property<string>("CustomUserId");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2500);

                    b.Property<int?>("DurationId");

                    b.Property<int?>("EstateId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBan");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVIP");

                    b.Property<int?>("MonthId");

                    b.Property<int?>("Price")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate");

                    b.Property<int?>("RoomId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<long?>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("DurationId");

                    b.HasIndex("EstateId");

                    b.HasIndex("MonthId");

                    b.HasIndex("RoomId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new { Id = 1, Area = 50m, AreaForView = 50m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 450, PublishDate = new DateTime(2019, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 2, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 770L },
                        new { Id = 2, Area = 55m, AreaForView = 55m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 550, PublishDate = new DateTime(2019, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 2, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 979L },
                        new { Id = 3, Area = 60m, AreaForView = 60m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 850, PublishDate = new DateTime(2019, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 2, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 979L },
                        new { Id = 4, Area = 59m, AreaForView = 59m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 550, PublishDate = new DateTime(2019, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 3, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 279L },
                        new { Id = 5, Area = 70m, AreaForView = 70m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 430, PublishDate = new DateTime(2019, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 3, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 6, Area = 40m, AreaForView = 40m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 7, Price = 350, PublishDate = new DateTime(2019, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 3, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 7, Area = 65m, AreaForView = 65m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 1, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 7, Price = 390, PublishDate = new DateTime(2019, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 3, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 8, Area = 67m, AreaForView = 67m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 2, EstateId = 1, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 7, Price = 70, PublishDate = new DateTime(2019, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 4, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 9, Area = 50m, AreaForView = 50m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 2, EstateId = 1, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 7, Price = 80, PublishDate = new DateTime(2019, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 4, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 499L },
                        new { Id = 10, Area = 60m, AreaForView = 60m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 2, EstateId = 1, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 7, Price = 30, PublishDate = new DateTime(2019, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 5, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 472L },
                        new { Id = 11, Area = 60m, AreaForView = 60m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 2, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 7, Price = 100, PublishDate = new DateTime(2019, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 1, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 361L },
                        new { Id = 12, Area = 40m, AreaForView = 40m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 2, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 90, PublishDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 2, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 13, Area = 52m, AreaForView = 52m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 2, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 70, PublishDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 2, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 577L },
                        new { Id = 14, Area = 58m, AreaForView = 58m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 2, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 80, PublishDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), RoomId = 3, UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 15, Area = 3m, AreaForView = 3m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 3, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 580, PublishDate = new DateTime(2019, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 16, Area = 4m, AreaForView = 4m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 3, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 420, PublishDate = new DateTime(2019, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 17, Area = 6m, AreaForView = 6m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 3, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 600, PublishDate = new DateTime(2019, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 579L },
                        new { Id = 18, Area = 6m, AreaForView = 6m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 4, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 750, PublishDate = new DateTime(2019, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 19, Area = 5m, AreaForView = 5m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 4, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 350, PublishDate = new DateTime(2019, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 20, Area = 8m, AreaForView = 8m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 4, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 490, PublishDate = new DateTime(2019, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 21, Area = 3m, AreaForView = 3m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 4, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 540, PublishDate = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 22, Area = 4m, AreaForView = 4m, CityId = 1, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 4, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 850, PublishDate = new DateTime(2019, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 879L },
                        new { Id = 23, Area = 51m, AreaForView = 51m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 5, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 750, PublishDate = new DateTime(2019, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 24, Area = 63m, AreaForView = 63m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 5, IsActive = false, IsBan = false, IsDeleted = false, IsVIP = false, MonthId = 8, Price = 720, PublishDate = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 25, Area = 90m, AreaForView = 90m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 6, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 500, PublishDate = new DateTime(2019, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 26, Area = 80m, AreaForView = 80m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 2, EstateId = 6, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 400, PublishDate = new DateTime(2019, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 379L },
                        new { Id = 27, Area = 110m, AreaForView = 110m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 7, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 300, PublishDate = new DateTime(2019, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L },
                        new { Id = 28, Area = 135m, AreaForView = 135m, CityId = 8, Details = "Premium layihəli Renessance Palace yaşayış komleksində Yasamal parkına baxan əla panaramalı, 2 balkonlu podmayak mənzildir. Mənzillərdə təmir işləri aparılır 20 sentyabrdan sakinlərə yaşamağa icazə veriləcək.", DurationId = 1, EstateId = 7, IsActive = true, IsBan = false, IsDeleted = false, IsVIP = true, MonthId = 8, Price = 660, PublishDate = new DateTime(2019, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ViewCount = 479L }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.AnnouncementPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementId");

                    b.Property<string>("AnnouncementPhotoURL");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementPhotos");

                    b.HasData(
                        new { Id = 1, AnnouncementId = 1, AnnouncementPhotoURL = "estate1.jpg" },
                        new { Id = 2, AnnouncementId = 1, AnnouncementPhotoURL = "estate2.jpg" },
                        new { Id = 3, AnnouncementId = 1, AnnouncementPhotoURL = "estate3.jpg" },
                        new { Id = 4, AnnouncementId = 1, AnnouncementPhotoURL = "estate4.jpg" },
                        new { Id = 5, AnnouncementId = 1, AnnouncementPhotoURL = "estate5.jpg" },
                        new { Id = 6, AnnouncementId = 1, AnnouncementPhotoURL = "estate6.jpg" },
                        new { Id = 7, AnnouncementId = 1, AnnouncementPhotoURL = "estate7.jpg" },
                        new { Id = 8, AnnouncementId = 2, AnnouncementPhotoURL = "estate8.jpg" },
                        new { Id = 9, AnnouncementId = 2, AnnouncementPhotoURL = "estate9.jpg" },
                        new { Id = 10, AnnouncementId = 2, AnnouncementPhotoURL = "estate10.jpg" },
                        new { Id = 11, AnnouncementId = 2, AnnouncementPhotoURL = "estate11.jpg" },
                        new { Id = 12, AnnouncementId = 3, AnnouncementPhotoURL = "estate12.jpg" },
                        new { Id = 13, AnnouncementId = 3, AnnouncementPhotoURL = "estate13.jpg" },
                        new { Id = 14, AnnouncementId = 3, AnnouncementPhotoURL = "estate14.jpg" },
                        new { Id = 15, AnnouncementId = 3, AnnouncementPhotoURL = "estate15.jpg" },
                        new { Id = 16, AnnouncementId = 3, AnnouncementPhotoURL = "estate16.jpg" },
                        new { Id = 17, AnnouncementId = 3, AnnouncementPhotoURL = "estate17.jpg" },
                        new { Id = 18, AnnouncementId = 3, AnnouncementPhotoURL = "estate18.jpg" },
                        new { Id = 19, AnnouncementId = 4, AnnouncementPhotoURL = "estate19.jpg" },
                        new { Id = 20, AnnouncementId = 4, AnnouncementPhotoURL = "estate20.jpg" },
                        new { Id = 21, AnnouncementId = 4, AnnouncementPhotoURL = "estate21.jpg" },
                        new { Id = 22, AnnouncementId = 4, AnnouncementPhotoURL = "estate22.jpg" },
                        new { Id = 23, AnnouncementId = 5, AnnouncementPhotoURL = "estate23.jpg" },
                        new { Id = 24, AnnouncementId = 5, AnnouncementPhotoURL = "estate24.jpg" },
                        new { Id = 25, AnnouncementId = 5, AnnouncementPhotoURL = "estate25.jpg" },
                        new { Id = 26, AnnouncementId = 5, AnnouncementPhotoURL = "estate26.jpg" },
                        new { Id = 27, AnnouncementId = 6, AnnouncementPhotoURL = "estate27.jpg" },
                        new { Id = 28, AnnouncementId = 6, AnnouncementPhotoURL = "estate28.jpg" },
                        new { Id = 29, AnnouncementId = 6, AnnouncementPhotoURL = "estate29.jpg" },
                        new { Id = 30, AnnouncementId = 6, AnnouncementPhotoURL = "estate30.jpg" },
                        new { Id = 31, AnnouncementId = 7, AnnouncementPhotoURL = "estate31.jpg" },
                        new { Id = 32, AnnouncementId = 7, AnnouncementPhotoURL = "estate32.jpg" },
                        new { Id = 33, AnnouncementId = 7, AnnouncementPhotoURL = "estate33.jpg" },
                        new { Id = 34, AnnouncementId = 7, AnnouncementPhotoURL = "estate34.jpg" },
                        new { Id = 35, AnnouncementId = 8, AnnouncementPhotoURL = "estate35.jpg" },
                        new { Id = 36, AnnouncementId = 8, AnnouncementPhotoURL = "estate36.jpg" },
                        new { Id = 37, AnnouncementId = 8, AnnouncementPhotoURL = "estate37.jpg" },
                        new { Id = 38, AnnouncementId = 8, AnnouncementPhotoURL = "estate38.jpg" },
                        new { Id = 39, AnnouncementId = 9, AnnouncementPhotoURL = "estate39.jpg" },
                        new { Id = 40, AnnouncementId = 9, AnnouncementPhotoURL = "estate40.jpg" },
                        new { Id = 41, AnnouncementId = 9, AnnouncementPhotoURL = "estate41.jpg" },
                        new { Id = 42, AnnouncementId = 9, AnnouncementPhotoURL = "estate42.jpg" },
                        new { Id = 43, AnnouncementId = 10, AnnouncementPhotoURL = "estate43.jpg" },
                        new { Id = 44, AnnouncementId = 10, AnnouncementPhotoURL = "estate44.jpg" },
                        new { Id = 45, AnnouncementId = 10, AnnouncementPhotoURL = "estate45.jpg" },
                        new { Id = 46, AnnouncementId = 10, AnnouncementPhotoURL = "estate46.jpg" },
                        new { Id = 47, AnnouncementId = 11, AnnouncementPhotoURL = "estate47.jpg" },
                        new { Id = 48, AnnouncementId = 11, AnnouncementPhotoURL = "estate48.jpg" },
                        new { Id = 49, AnnouncementId = 11, AnnouncementPhotoURL = "estate49.jpg" },
                        new { Id = 50, AnnouncementId = 11, AnnouncementPhotoURL = "estate50.jpg" },
                        new { Id = 51, AnnouncementId = 11, AnnouncementPhotoURL = "estate51.jpg" },
                        new { Id = 52, AnnouncementId = 12, AnnouncementPhotoURL = "estate52.jpg" },
                        new { Id = 53, AnnouncementId = 12, AnnouncementPhotoURL = "estate53.jpg" },
                        new { Id = 54, AnnouncementId = 12, AnnouncementPhotoURL = "estate54.jpg" },
                        new { Id = 55, AnnouncementId = 12, AnnouncementPhotoURL = "estate55.jpg" },
                        new { Id = 56, AnnouncementId = 13, AnnouncementPhotoURL = "estate56.jpg" },
                        new { Id = 57, AnnouncementId = 13, AnnouncementPhotoURL = "estate57.jpg" },
                        new { Id = 58, AnnouncementId = 13, AnnouncementPhotoURL = "estate58.jpg" },
                        new { Id = 59, AnnouncementId = 13, AnnouncementPhotoURL = "estate59.jpg" },
                        new { Id = 60, AnnouncementId = 13, AnnouncementPhotoURL = "estate60.jpg" },
                        new { Id = 61, AnnouncementId = 14, AnnouncementPhotoURL = "estate61.jpg" },
                        new { Id = 62, AnnouncementId = 14, AnnouncementPhotoURL = "estate62.jpg" },
                        new { Id = 63, AnnouncementId = 14, AnnouncementPhotoURL = "estate63.jpg" },
                        new { Id = 64, AnnouncementId = 14, AnnouncementPhotoURL = "estate64.jpg" },
                        new { Id = 65, AnnouncementId = 15, AnnouncementPhotoURL = "estate65.jpg" },
                        new { Id = 66, AnnouncementId = 15, AnnouncementPhotoURL = "estate66.jpg" },
                        new { Id = 67, AnnouncementId = 15, AnnouncementPhotoURL = "estate67.jpg" },
                        new { Id = 68, AnnouncementId = 15, AnnouncementPhotoURL = "estate68.jpg" },
                        new { Id = 69, AnnouncementId = 16, AnnouncementPhotoURL = "estate69.jpg" },
                        new { Id = 70, AnnouncementId = 16, AnnouncementPhotoURL = "estate70.jpg" },
                        new { Id = 71, AnnouncementId = 16, AnnouncementPhotoURL = "estate71.jpg" },
                        new { Id = 72, AnnouncementId = 16, AnnouncementPhotoURL = "estate72.jpg" },
                        new { Id = 73, AnnouncementId = 17, AnnouncementPhotoURL = "estate73.jpg" },
                        new { Id = 74, AnnouncementId = 17, AnnouncementPhotoURL = "estate74.jpg" },
                        new { Id = 75, AnnouncementId = 17, AnnouncementPhotoURL = "estate75.jpg" },
                        new { Id = 76, AnnouncementId = 17, AnnouncementPhotoURL = "estate76.jpg" },
                        new { Id = 77, AnnouncementId = 18, AnnouncementPhotoURL = "estate77.jpg" },
                        new { Id = 78, AnnouncementId = 18, AnnouncementPhotoURL = "estate78.jpg" },
                        new { Id = 79, AnnouncementId = 18, AnnouncementPhotoURL = "estate79.jpg" },
                        new { Id = 80, AnnouncementId = 18, AnnouncementPhotoURL = "estate80.jpg" },
                        new { Id = 81, AnnouncementId = 19, AnnouncementPhotoURL = "estate81.jpg" },
                        new { Id = 82, AnnouncementId = 19, AnnouncementPhotoURL = "estate82.jpg" },
                        new { Id = 83, AnnouncementId = 19, AnnouncementPhotoURL = "estate83.jpg" },
                        new { Id = 84, AnnouncementId = 19, AnnouncementPhotoURL = "estate84.jpg" },
                        new { Id = 85, AnnouncementId = 20, AnnouncementPhotoURL = "estate85.jpg" },
                        new { Id = 86, AnnouncementId = 20, AnnouncementPhotoURL = "estate86.jpg" },
                        new { Id = 87, AnnouncementId = 20, AnnouncementPhotoURL = "estate87.jpg" },
                        new { Id = 88, AnnouncementId = 20, AnnouncementPhotoURL = "estate88.jpg" },
                        new { Id = 89, AnnouncementId = 21, AnnouncementPhotoURL = "estate89.jpg" },
                        new { Id = 90, AnnouncementId = 21, AnnouncementPhotoURL = "estate90.jpg" },
                        new { Id = 91, AnnouncementId = 21, AnnouncementPhotoURL = "estate91.jpg" },
                        new { Id = 92, AnnouncementId = 21, AnnouncementPhotoURL = "estate92.jpg" },
                        new { Id = 93, AnnouncementId = 22, AnnouncementPhotoURL = "estate93.jpg" },
                        new { Id = 94, AnnouncementId = 22, AnnouncementPhotoURL = "estate94.jpg" },
                        new { Id = 95, AnnouncementId = 22, AnnouncementPhotoURL = "estate95.jpg" },
                        new { Id = 96, AnnouncementId = 22, AnnouncementPhotoURL = "estate96.jpg" },
                        new { Id = 97, AnnouncementId = 23, AnnouncementPhotoURL = "estate97.jpg" },
                        new { Id = 98, AnnouncementId = 23, AnnouncementPhotoURL = "estate98.jpg" },
                        new { Id = 99, AnnouncementId = 23, AnnouncementPhotoURL = "estate99.jpg" },
                        new { Id = 100, AnnouncementId = 23, AnnouncementPhotoURL = "estate100.jpg" },
                        new { Id = 101, AnnouncementId = 24, AnnouncementPhotoURL = "estate101.jpg" },
                        new { Id = 102, AnnouncementId = 24, AnnouncementPhotoURL = "estate102.jpg" },
                        new { Id = 103, AnnouncementId = 24, AnnouncementPhotoURL = "estate103.jpg" },
                        new { Id = 104, AnnouncementId = 24, AnnouncementPhotoURL = "estate104.jpg" },
                        new { Id = 105, AnnouncementId = 25, AnnouncementPhotoURL = "estate105.jpg" },
                        new { Id = 106, AnnouncementId = 25, AnnouncementPhotoURL = "estate106.jpg" },
                        new { Id = 107, AnnouncementId = 25, AnnouncementPhotoURL = "estate107.jpg" },
                        new { Id = 108, AnnouncementId = 25, AnnouncementPhotoURL = "estate108.jpg" },
                        new { Id = 109, AnnouncementId = 26, AnnouncementPhotoURL = "estate109.jpg" },
                        new { Id = 110, AnnouncementId = 26, AnnouncementPhotoURL = "estate110.jpg" },
                        new { Id = 111, AnnouncementId = 26, AnnouncementPhotoURL = "estate111.jpg" },
                        new { Id = 112, AnnouncementId = 26, AnnouncementPhotoURL = "estate112.jpg" },
                        new { Id = 113, AnnouncementId = 27, AnnouncementPhotoURL = "estate113.jpg" },
                        new { Id = 114, AnnouncementId = 27, AnnouncementPhotoURL = "estate114.jpg" },
                        new { Id = 115, AnnouncementId = 27, AnnouncementPhotoURL = "estate115.jpg" },
                        new { Id = 116, AnnouncementId = 27, AnnouncementPhotoURL = "estate116.jpg" },
                        new { Id = 117, AnnouncementId = 27, AnnouncementPhotoURL = "estate117.jpg" },
                        new { Id = 118, AnnouncementId = 27, AnnouncementPhotoURL = "estate118.jpg" },
                        new { Id = 119, AnnouncementId = 28, AnnouncementPhotoURL = "estate119.jpg" },
                        new { Id = 120, AnnouncementId = 28, AnnouncementPhotoURL = "estate120.jpg" },
                        new { Id = 121, AnnouncementId = 28, AnnouncementPhotoURL = "estate121.jpg" },
                        new { Id = 122, AnnouncementId = 28, AnnouncementPhotoURL = "estate122.jpg" },
                        new { Id = 123, AnnouncementId = 28, AnnouncementPhotoURL = "estate123.jpg" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, CityName = "Abşeron" },
                        new { Id = 2, CityName = "Ağcabədi" },
                        new { Id = 3, CityName = "Ağdam" },
                        new { Id = 4, CityName = "Ağdaş" },
                        new { Id = 5, CityName = "Ağstafa" },
                        new { Id = 6, CityName = "Ağsu" },
                        new { Id = 7, CityName = "Astara" },
                        new { Id = 8, CityName = "Bakı" },
                        new { Id = 9, CityName = "Balakən" },
                        new { Id = 10, CityName = "Beyləqan" },
                        new { Id = 11, CityName = "Bərdə" },
                        new { Id = 12, CityName = "Biləsuvar" },
                        new { Id = 13, CityName = "Cəbrayıl" },
                        new { Id = 14, CityName = "Cəlilabad" },
                        new { Id = 15, CityName = "Daşkəsən" },
                        new { Id = 16, CityName = "Füzuli" },
                        new { Id = 17, CityName = "Gədəbəy" },
                        new { Id = 18, CityName = "Gəncə" },
                        new { Id = 19, CityName = "Goranboy" },
                        new { Id = 20, CityName = "Göyçay" },
                        new { Id = 21, CityName = "Göygöl" },
                        new { Id = 22, CityName = "Hacıqabul" },
                        new { Id = 23, CityName = "Xaçmaz" },
                        new { Id = 24, CityName = "Xankəndi" },
                        new { Id = 25, CityName = "Xızı" },
                        new { Id = 26, CityName = "Xocalı" },
                        new { Id = 27, CityName = "Xocavənd" },
                        new { Id = 28, CityName = "İmişli" },
                        new { Id = 29, CityName = "İsmayıllı" },
                        new { Id = 30, CityName = "Kəlbəcər" },
                        new { Id = 31, CityName = "Kürdəmir" },
                        new { Id = 32, CityName = "Qax" },
                        new { Id = 33, CityName = "Qazax" },
                        new { Id = 34, CityName = "Qəbələ" },
                        new { Id = 35, CityName = "Qobustan" },
                        new { Id = 36, CityName = "Quba" },
                        new { Id = 37, CityName = "Qubadlı" },
                        new { Id = 38, CityName = "Qusar" },
                        new { Id = 39, CityName = "Laçın" },
                        new { Id = 40, CityName = "Lerik" },
                        new { Id = 41, CityName = "Lənkəran" },
                        new { Id = 42, CityName = "Masallı" },
                        new { Id = 43, CityName = "Mingəçevir" },
                        new { Id = 44, CityName = "Naftalan" },
                        new { Id = 45, CityName = "Neftçala" },
                        new { Id = 46, CityName = "Oğuz" },
                        new { Id = 47, CityName = "Saatlı" },
                        new { Id = 48, CityName = "Sabirabad" },
                        new { Id = 49, CityName = "Salyan" },
                        new { Id = 50, CityName = "Samux" },
                        new { Id = 51, CityName = "Siyəzən" },
                        new { Id = 52, CityName = "Sumqayıt" },
                        new { Id = 53, CityName = "Şabran" },
                        new { Id = 54, CityName = "Şamaxı" },
                        new { Id = 55, CityName = "Şirvan" },
                        new { Id = 56, CityName = "Şəki" },
                        new { Id = 57, CityName = "Şəmkir" },
                        new { Id = 58, CityName = "Şuşa" },
                        new { Id = 59, CityName = "Tərtər" },
                        new { Id = 60, CityName = "Tovuz" },
                        new { Id = 61, CityName = "Ucar" },
                        new { Id = 62, CityName = "Yardımlı" },
                        new { Id = 63, CityName = "Yevlax" },
                        new { Id = 64, CityName = "Zaqatala" },
                        new { Id = 65, CityName = "Zəngilan" },
                        new { Id = 66, CityName = "Zərdab" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MobileOperatorId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureURL");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MobileOperatorId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DurationType");

                    b.HasKey("Id");

                    b.ToTable("Durations");

                    b.HasData(
                        new { Id = 1, DurationType = "Aylıq" },
                        new { Id = 2, DurationType = "Günlük" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstateName");

                    b.HasKey("Id");

                    b.ToTable("Estates");

                    b.HasData(
                        new { Id = 1, EstateName = "Mənzil" },
                        new { Id = 2, EstateName = "Ev/Villa" },
                        new { Id = 3, EstateName = "Bağ" },
                        new { Id = 4, EstateName = "Torpaq" },
                        new { Id = 5, EstateName = "Qaraj" },
                        new { Id = 6, EstateName = "Ofis" },
                        new { Id = 7, EstateName = "Obyekt" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(2500);

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<DateTime>("SentTime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 1, Email = "mgb@gmail.com", FullName = "Mesaj göndərən", MessageText = "Hər vaxtınız xeyir, mən qeydiyyat zamanı problemlə üzləşirəm. Email'imə təsdiq mesajı gəlmir.", PhoneNumber = "0501234567", SentTime = new DateTime(2019, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), Subject = "Qeydiyyat problemi" },
                        new { Id = 2, Email = "mgb@gmail.com", FullName = "Mesaj göndərən", MessageText = "Hər vaxtınız xeyir, mən qeydiyyat zamanı problemlə üzləşirəm. Email'imə təsdiq mesajı gəlmir.", PhoneNumber = "0501234567", SentTime = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), Subject = "Qeydiyyat problemi" },
                        new { Id = 3, Email = "mgb@gmail.com", FullName = "Mesaj göndərən", MessageText = "Hər vaxtınız xeyir, mən qeydiyyat zamanı problemlə üzləşirəm. Email'imə təsdiq mesajı gəlmir.", PhoneNumber = "0501234567", SentTime = new DateTime(2019, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Subject = "Qeydiyyat problemi" },
                        new { Id = 4, Email = "mgb@gmail.com", FullName = "Mesaj göndərən", MessageText = "Hər vaxtınız xeyir, mən qeydiyyat zamanı problemlə üzləşirəm. Email'imə təsdiq mesajı gəlmir.", PhoneNumber = "0501234567", SentTime = new DateTime(2019, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), Subject = "Qeydiyyat problemi" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.MobileOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MobileOperatorCode");

                    b.HasKey("Id");

                    b.ToTable("MobileOperators");

                    b.HasData(
                        new { Id = 1, MobileOperatorCode = "+99440" },
                        new { Id = 2, MobileOperatorCode = "+99450" },
                        new { Id = 3, MobileOperatorCode = "+99451" },
                        new { Id = 4, MobileOperatorCode = "+99455" },
                        new { Id = 5, MobileOperatorCode = "+99470" },
                        new { Id = 6, MobileOperatorCode = "+99477" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MonthName");

                    b.HasKey("Id");

                    b.ToTable("Months");

                    b.HasData(
                        new { Id = 1, MonthName = "yanvar" },
                        new { Id = 2, MonthName = "fevral" },
                        new { Id = 3, MonthName = "mart" },
                        new { Id = 4, MonthName = "aprel" },
                        new { Id = 5, MonthName = "may" },
                        new { Id = 6, MonthName = "iyun" },
                        new { Id = 7, MonthName = "iyul" },
                        new { Id = 8, MonthName = "avqust" },
                        new { Id = 9, MonthName = "sentyabr" },
                        new { Id = 10, MonthName = "oktyabr" },
                        new { Id = 11, MonthName = "noyabr" },
                        new { Id = 12, MonthName = "dekabr" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoomType");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new { Id = 1, RoomType = "1 otaqlı" },
                        new { Id = 2, RoomType = "2 otaqlı" },
                        new { Id = 3, RoomType = "3 otaqlı" },
                        new { Id = 4, RoomType = "4 otaqlı" },
                        new { Id = 5, RoomType = "5+ otaqlı" }
                    );
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RuleText")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new { Id = 1, RuleText = "2019-cu ildən fəaliyyət göstərən Kirayemlak.az saytı Azərbaycanda daşınmaz əmlakın kirayəsi üçün nəzərdə tutulmuşdur. Günü-gündən inkişaf edən saytımızın gün ərzində minlərlə istifadəçisi olur. Portal olaraq daim inkişaf etmək əzmindəyik və bu səbəbdəndir ki saytımızın dizaynı, funksionallığı və qayda-qanunları yenilənir. Bu dəyişikliklərin hamısı saytımıza elan verən və saytımızda axtarış edən istifadəçilərin rahatlığı üçündür. Portal olaraq istifadəçilərimizin irad və təkliflərini diqqətlə dinləyir onları qeyd edir və növbəti dəyişikliklərimizdə uyğun gələnlərini tətbiq edirik. Bu da saytımızın dahada istifadəyə yararlı olmasına gətirib çıxardır." }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.Announcement", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.City", "City")
                        .WithMany("Announcements")
                        .HasForeignKey("CityId");

                    b.HasOne("CodeAcademyFinal.Models.CustomUser", "CustomUser")
                        .WithMany("Announcements")
                        .HasForeignKey("CustomUserId");

                    b.HasOne("CodeAcademyFinal.Models.Duration", "Duration")
                        .WithMany("Announcements")
                        .HasForeignKey("DurationId");

                    b.HasOne("CodeAcademyFinal.Models.Estate", "Estate")
                        .WithMany("Announcements")
                        .HasForeignKey("EstateId");

                    b.HasOne("CodeAcademyFinal.Models.Month", "Month")
                        .WithMany("Announcements")
                        .HasForeignKey("MonthId");

                    b.HasOne("CodeAcademyFinal.Models.Room", "Room")
                        .WithMany("Announcements")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.AnnouncementPhoto", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.Announcement", "Announcement")
                        .WithMany("AnnouncementPhotos")
                        .HasForeignKey("AnnouncementId");
                });

            modelBuilder.Entity("CodeAcademyFinal.Models.CustomUser", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.MobileOperator", "MobileOperator")
                        .WithMany("CustomUsers")
                        .HasForeignKey("MobileOperatorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademyFinal.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeAcademyFinal.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
